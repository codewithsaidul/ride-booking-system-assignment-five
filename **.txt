// RideDetailsPage.tsx
import { useParams } from 'react-router-dom';
import { useGetRideByIdQuery } from '@/redux/feature/ride/ride.api';
import UnauthorizedPage from './UnauthorizedPage'; // ЁЯСИ ржирждрзБржи ржкрзЗржЬржЯрж┐ ржЗржорзНржкрзЛрж░рзНржЯ ржХрж░рзБржи
import Loading from '@/components/loading/Loading';

const RideDetailsPage = () => {
  const { rideId } = useParams();
  
  // ЁЯСЗ isError ржПржмржВ error рж╕рзНржЯрзЗржЯржЯрж┐ ржирж┐ржи
  const { data: rideData, isLoading, isError, error } = useGetRideByIdQuery(rideId);

  // рзз. ржкрзНрж░ржержорзЗ рж▓рзЛржбрж┐ржВ ржЕржмрж╕рзНржерж╛ ржЪрзЗржХ ржХрж░рзБржи
  if (isLoading) {
    return <Loading />;
  }

  // ЁЯСЗ рзи. ржПрж░ржкрж░ ржПрж░рж░ ржЕржмрж╕рзНржерж╛ ржЪрзЗржХ ржХрж░рзБржи
  if (isError) {
    // ржпржжрж┐ ржПрж░рж░ржЯрж┐ 403 Forbidden рж╣ржпрж╝
    if (error?.status === 403) {
      return <UnauthorizedPage />;
    }
    // ржЕржирзНржп ржХрзЛржирзЛ ржПрж░рж░рзЗрж░ ржЬржирзНржп
    return <div>An unexpected error occurred. Please try again.</div>;
  }

  // рзй. ржпржжрж┐ ржХрзЛржирзЛ рж▓рзЛржбрж┐ржВ ржмрж╛ ржПрж░рж░ ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ ржбрзЗржЯрж╛ ржжрзЗржЦрж╛ржи
  const ride = rideData?.data;

  return (
    <div>
      <h1>Ride Details: {ride._id}</h1>
      {/* ... ржЖржкржирж╛рж░ ржкрзЗржЬрзЗрж░ ржмрж╛ржХрж┐ ржХржирзНржЯрзЗржирзНржЯ ... */}
    </div>
  );
};